(set-info :source | fuzzsmt 0.3 |)
(set-logic  QF_AUFBV)
(set-info :status unknown)
(declare-fun p0 ((_ BitVec 11)  ) Bool )
(declare-fun p1 ((_ BitVec 14)  ) Bool )
(declare-fun v0 () (_ BitVec 7))
(declare-fun a1 () (Array (_ BitVec 7) (_ BitVec 10)))
(declare-fun a2 () (Array (_ BitVec 5) (_ BitVec 8)))
(declare-fun a3 () (Array (_ BitVec 2) (_ BitVec 11)))
(assert
(let ((e4 (_ bv2842 13)))
(let ((e5 (_ bv95 10)))
(let ((e6 (ite (p0 ((_ extract 10 0) e4))(_ bv1 1) (_ bv0 1))))
(let ((e7 (ite (p1 ((_ zero_extend 7) v0))(_ bv1 1) (_ bv0 1))))
(let ((e8 (bvsub ((_ zero_extend 12) e6) e4)))
(let ((e9 (bvlshr e5 ((_ zero_extend 9) e6))))
(let ((e10 (store a3 ((_ extract 1 0) e9) ((_ zero_extend 10) e7))))
(let ((e11 (store a1 ((_ extract 8 2) e4) ((_ zero_extend 9) e6))))
(let ((e12 (select a2 ((_ extract 7 3) e9))))
(let ((e13 (store e10 ((_ extract 5 4) e4) ((_ zero_extend 10) e7))))
(let ((e14 (store e13 ((_ extract 7 6) e9) ((_ zero_extend 10) e7))))
(let ((e15 (ite (p0 ((_ sign_extend 3) e12))(_ bv1 1) (_ bv0 1))))
(let ((e16 (ite (bvuge e6 e15)(_ bv1 1) (_ bv0 1))))
(let ((e17 (ite (p1 ((_ sign_extend 7) v0))(_ bv1 1) (_ bv0 1))))
(let ((e18 (ite (bvsle e7 e7)(_ bv1 1) (_ bv0 1))))
(let ((e19 (bvlshr e8 ((_ sign_extend 12) e17))))
(let ((e20 (bvlshr e4 ((_ sign_extend 12) e15))))
(let ((e21 (bvnot e5)))
(let ((e22 (bvsub e9 ((_ sign_extend 9) e6))))
(let ((e23 (bvsgt ((_ zero_extend 9) e18) e9)))
(let ((e24 (p0 ((_ sign_extend 3) e12))))
(let ((e25 (bvsge ((_ zero_extend 3) e9) e20)))
(let ((e26 (p1 ((_ zero_extend 7) v0))))
(let ((e27 (bvugt e12 ((_ sign_extend 7) e15))))
(let ((e28 (= e19 e19)))
(let ((e29 (bvuge v0 ((_ zero_extend 6) e6))))
(let ((e30 (bvuge e21 ((_ sign_extend 9) e16))))
(let ((e31 (bvugt e4 ((_ zero_extend 12) e17))))
(let ((e32 (bvslt e17 e7)))
(let ((e33 (bvugt ((_ sign_extend 12) e18) e20)))
(let ((e34 (bvult ((_ sign_extend 9) e15) e21)))
(let ((e35 (distinct ((_ zero_extend 6) v0) e8)))
(let ((e36 (bvult ((_ zero_extend 3) e22) e4)))
(let ((e37 (bvsle ((_ sign_extend 2) e12) e5)))
(let ((e38 (= e23 e23)))
(let ((e39 (ite e35 e33 e38)))
(let ((e40 (=> e25 e28)))
(let ((e41 (= e26 e31)))
(let ((e42 (=> e36 e39)))
(let ((e43 (and e41 e37)))
(let ((e44 (xor e32 e24)))
(let ((e45 (=> e44 e27)))
(let ((e46 (ite e40 e29 e40)))
(let ((e47 (=> e34 e34)))
(let ((e48 (=> e43 e46)))
(let ((e49 (or e47 e47)))
(let ((e50 (xor e30 e49)))
(let ((e51 (or e48 e48)))
(let ((e52 (ite e42 e42 e51)))
(let ((e53 (or e50 e45)))
(let ((e54 (or e52 e52)))
(let ((e55 (= e54 e54)))
(let ((e56 (=> e55 e53)))
e56
))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
