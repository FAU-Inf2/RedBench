
(set-logic  QF_AUFBV)
(declare-fun f0 ( (_ BitVec 11)) (_ BitVec 7))
(declare-fun p0 ((_ BitVec 13) (_ BitVec 6)  ) Bool )
(declare-fun p1 ((_ BitVec 15) (_ BitVec 2)  ) Bool )
(declare-fun v0 () (_ BitVec 15))
(declare-fun a1 () (Array (_ BitVec 5) (_ BitVec 16)))
(assert
(let ((e2 (_ bv1 1)))
(let ((e3 (_ bv23 7)))
(let ((e4 (bvnand e2 e2)))
(let ((e5 (ite (p1 ((_ sign_extend 14) e2) ((_ sign_extend 1) e4))(_ bv1 1) (_ bv0 1))))
(let ((e6 (f0 ((_ sign_extend 4) e3))))
(let ((e7 (ite (p0 ((_ zero_extend 6) e3) ((_ sign_extend 5) e2))(_ bv1 1) (_ bv0 1))))
(let ((e8 ((_ extract 0 0) e4)))
(let ((e9 (f0 ((_ zero_extend 10) e4))))
(let ((e10 (bvmul ((_ sign_extend 6) e4) e9)))
(let ((e11 ((_ rotate_right 0) e7)))
(let ((e12 (bvurem v0 v0)))
(let ((e13 (store a1 ((_ extract 5 1) e9) ((_ sign_extend 1) e12))))
(let ((e14 (select e13 ((_ zero_extend 4) e7))))
(let ((e15 (select e13 ((_ extract 4 0) e3))))
(let ((e16 (f0 ((_ zero_extend 4) e10))))
(let ((e17 (ite (p0 ((_ sign_extend 6) e6) ((_ extract 8 3) e12))(_ bv1 1) (_ bv0 1))))
(let ((e18 (ite (p1 v0 ((_ sign_extend 1) e5))(_ bv1 1) (_ bv0 1))))
(let ((e19 (bvxnor e2 e17)))
(let ((e20 (bvnot e11)))
(let ((a 0))
(let ((e22 (ite (= (_ bv1 1) ((_ extract 13 13) e15)) e20 e18)))
(let ((e23 (bvmul e14 ((_ sign_extend 15) e4))))
(let ((e24 (bvcomp e8 e20)))
(let ((e25 (ite (distinct e9 ((_ sign_extend 6) e17))(_ bv1 1) (_ bv0 1))))
(let ((e26 (bvcomp e7 e7)))
(let ((e27 (bvult e10 ((_ sign_extend 6) e26))))
(let ((e28 (bvule ((_ zero_extend 14) e11) e12)))
(let ((e29 (bvuge e12 ((_ zero_extend 8) e10))))
(let ((a 0))
(let ((a 0))
(let ((e32 (p0 ((_ sign_extend 12) e5) ((_ sign_extend 5) e22))))
(let ((e33 (distinct e3 e3)))
(let ((e34 (distinct e10 ((_ sign_extend 6) e4))))
(let ((a 0))
(let ((a 0))
(let ((a 0))
(let ((a 0))
(let ((e39 (bvugt ((_ zero_extend 6) e20) e6)))
(let ((a 0))
(let ((e41 (bvsge e17 e26)))
(let ((a 0))
(let ((e43 (bvule e4 e22)))
(let ((a 0))
(let ((e45 (p1 ((_ zero_extend 14) e25) ((_ zero_extend 1) e2))))
(let ((e46 (bvsle e14 ((_ zero_extend 9) e16))))
(let ((e47 (bvult e6 ((_ sign_extend 6) e19))))
(let ((a 0))
(let ((a 0))
(let ((a 0))
(let ((a 0))
(let ((e52 (bvult e19 e4)))
(let ((e53 (bvugt e16 ((_ zero_extend 6) e24))))
(let ((a 0))
(let ((e55 (bvuge e23 ((_ sign_extend 9) e6))))
(let ((a 0))
(let ((e57 (bvslt v0 e12)))
(let ((e58 (bvult e11 e11)))
(let ((e59 (bvsgt e16 e10)))
(let ((a 0))
(let ((a 0))
(let ((a 0))
(let ((e63 (bvugt e15 ((_ zero_extend 15) e26))))
(let ((e64 (and e45)))
(let ((e65 (and e29)))
(let ((e66 (and e33)))
(let ((e67 (= e52 e63)))
(let ((a 0))
(let ((e69 (= e59 e41)))
(let ((e70 (or e66)))
(let ((e71 (or e46)))
(let ((e72 (= e27 e28)))
(let ((a 0))
(let ((a 0))
(let ((e75 (not e65)))
(let ((a 0))
(let ((a 0))
(let ((e78 (xor e72 e55)))
(let ((a 0))
(let ((e80 (=> e34 e47)))
(let ((e81 (=> e69 e32)))
(let ((e82 (= e64 e43)))
(let ((e83 (=> e80 e81)))
(let ((e84 (or e83)))
(let ((a 0))
(let ((a 0))
(let ((e87 (and e67)))
(let ((e88 (= e57 e57)))
(let ((e89 (= e53 e75)))
(let ((e90 (or e82)))
(let ((e91 (=> e70 e39)))
(let ((e92 (=> e87 e87)))
(let ((e93 (= e71 e89)))
(let ((e94 (not e84)))
(let ((e95 (= e90 e58)))
(let ((e96 (xor e93 e78)))
(let ((e97 (and e88)))
(let ((e98 (or e96)))
(let ((e99 (ite e95 e94 e91)))
(let ((e100 (= e97 e99)))
(let ((e101 (xor e100 e100)))
(let ((e102 (or e98)))
(let ((e103 (= e92 e101)))
(let ((e104 (=> e103 e102)))
(let ((e105 (and e104)))
e105
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)