(set-info :source | fuzzsmt 0.3 |)
(set-logic  QF_UFBV)
(set-info :status unknown)
(declare-fun f0 ( (_ BitVec 5) (_ BitVec 10) (_ BitVec 3)) (_ BitVec 11))
(declare-fun f1 ( (_ BitVec 12) (_ BitVec 1) (_ BitVec 3)) (_ BitVec 8))
(declare-fun p0 ((_ BitVec 2) (_ BitVec 14) (_ BitVec 8)  ) Bool )
(declare-fun v0 () (_ BitVec 7))
(declare-fun v1 () (_ BitVec 7))
(declare-fun v2 () (_ BitVec 11))
(declare-fun v3 () (_ BitVec 12))
(declare-fun v4 () (_ BitVec 13))
(assert
(let ((e5 (_ bv49 6)))
(let ((e6 (f1 v3 ((_ extract 8 8) v4) ((_ extract 5 3) v1))))
(let ((e7 (f0 ((_ extract 6 2) v0) ((_ sign_extend 3) v1) ((_ extract 7 5) e6))))
(let ((e8 (ite (p0 ((_ extract 1 0) e5) ((_ sign_extend 7) v0) ((_ extract 9 2) e7))(_ bv1 1) (_ bv0 1))))
(let ((e9 (bvashr ((_ zero_extend 1) v0) e6)))
(let ((e10 (f0 ((_ extract 7 3) e6) ((_ zero_extend 3) v0) ((_ zero_extend 2) e8))))
(let ((e11 (bvor e6 ((_ zero_extend 1) v1))))
(let ((e12 (bvadd ((_ sign_extend 4) v0) e7)))
(let ((e13 (ite (bvsgt e5 ((_ zero_extend 5) e8))(_ bv1 1) (_ bv0 1))))
(let ((e14 (ite (bvsgt v3 ((_ sign_extend 11) e13))(_ bv1 1) (_ bv0 1))))
(let ((e15 ((_ repeat 1) e7)))
(let ((e16 (bvurem ((_ zero_extend 1) v1) e11)))
(let ((e17 ((_ sign_extend 7) e9)))
(let ((e18 (bvudiv v4 v4)))
(let ((e19 (bvneg e5)))
(let ((e20 (bvsrem e6 e9)))
(let ((e21 ((_ rotate_right 6) e6)))
(let ((e22 (bvashr ((_ sign_extend 7) e9) e17)))
(let ((e23 ((_ sign_extend 1) e7)))
(let ((e24 (bvurem ((_ sign_extend 7) e13) e6)))
(let ((e25 (bvsdiv ((_ sign_extend 3) e24) v2)))
(let ((e26 (p0 ((_ extract 5 4) e23) ((_ sign_extend 3) e25) ((_ extract 10 3) e12))))
(let ((e27 (bvuge ((_ sign_extend 4) v0) e12)))
(let ((e28 (bvule e6 ((_ zero_extend 7) e8))))
(let ((e29 (bvslt e22 ((_ zero_extend 9) e19))))
(let ((e30 (p0 ((_ zero_extend 1) e8) ((_ zero_extend 6) e21) ((_ sign_extend 2) e5))))
(let ((e31 (bvuge e24 e21)))
(let ((e32 (bvsle e24 e16)))
(let ((e33 (bvslt ((_ sign_extend 6) e5) v3)))
(let ((e34 (= ((_ sign_extend 7) e8) e6)))
(let ((e35 (bvsgt ((_ sign_extend 10) e14) e10)))
(let ((e36 (bvuge e17 ((_ sign_extend 7) e21))))
(let ((e37 (bvsle ((_ sign_extend 3) e9) e15)))
(let ((e38 (bvugt ((_ sign_extend 3) e24) e12)))
(let ((e39 (bvult ((_ zero_extend 7) e24) e17)))
(let ((e40 (bvsge e10 ((_ zero_extend 10) e8))))
(let ((e41 (p0 ((_ extract 9 8) e12) ((_ sign_extend 8) e19) e16)))
(let ((e42 (distinct ((_ zero_extend 3) e20) e10)))
(let ((e43 (distinct e12 e10)))
(let ((e44 (bvsle ((_ zero_extend 7) e13) e20)))
(let ((e45 (bvsle ((_ zero_extend 4) v2) e22)))
(let ((e46 (bvugt e17 ((_ zero_extend 7) e24))))
(let ((e47 (bvsgt e12 ((_ sign_extend 3) e11))))
(let ((e48 (distinct v2 ((_ zero_extend 3) e16))))
(let ((e49 (bvslt ((_ sign_extend 5) e21) e18)))
(let ((e50 (distinct e10 e10)))
(let ((e51 (bvuge ((_ sign_extend 5) e11) e18)))
(let ((e52 (bvugt v2 e25)))
(let ((e53 (p0 ((_ extract 6 5) v2) ((_ zero_extend 6) e24) e20)))
(let ((e54 (bvult ((_ sign_extend 4) e20) v3)))
(let ((e55 (distinct e15 ((_ sign_extend 3) e9))))
(let ((e56 (bvsle e16 e11)))
(let ((e57 (bvult e12 e12)))
(let ((e58 (= ((_ sign_extend 3) e24) e7)))
(let ((e59 (bvule v4 ((_ sign_extend 1) v3))))
(let ((e60 (bvult e18 ((_ zero_extend 2) e15))))
(let ((e61 (bvsgt ((_ zero_extend 4) v1) e25)))
(let ((e62 (=> e27 e56)))
(let ((e63 (or e40 e38)))
(let ((e64 (xor e29 e35)))
(let ((e65 (or e60 e53)))
(let ((e66 (ite e52 e47 e49)))
(let ((e67 (xor e45 e55)))
(let ((e68 (ite e64 e36 e37)))
(let ((e69 (and e33 e46)))
(let ((e70 (and e66 e51)))
(let ((e71 (ite e44 e30 e48)))
(let ((e72 (not e59)))
(let ((e73 (ite e67 e57 e69)))
(let ((e74 (not e31)))
(let ((e75 (not e26)))
(let ((e76 (ite e42 e32 e75)))
(let ((e77 (not e54)))
(let ((e78 (xor e43 e34)))
(let ((e79 (ite e58 e62 e65)))
(let ((e80 (not e71)))
(let ((e81 (= e72 e50)))
(let ((e82 (and e79 e61)))
(let ((e83 (ite e70 e76 e68)))
(let ((e84 (ite e74 e82 e81)))
(let ((e85 (=> e80 e73)))
(let ((e86 (=> e28 e78)))
(let ((e87 (or e77 e86)))
(let ((e88 (xor e41 e87)))
(let ((e89 (or e84 e63)))
(let ((e90 (not e85)))
(let ((e91 (=> e83 e83)))
(let ((e92 (and e88 e88)))
(let ((e93 (and e89 e90)))
(let ((e94 (ite e93 e39 e93)))
(let ((e95 (ite e94 e92 e94)))
(let ((e96 (=> e95 e95)))
(let ((e97 (and e96 e91)))
e97
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
