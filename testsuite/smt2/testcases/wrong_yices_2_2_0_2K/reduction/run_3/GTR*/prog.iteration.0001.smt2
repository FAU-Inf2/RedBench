
(set-logic  QF_UFBV)
(declare-fun f0 ( (_ BitVec 12)) (_ BitVec 2))
(declare-fun f1 ( (_ BitVec 6) (_ BitVec 3) (_ BitVec 5)) (_ BitVec 13))
(declare-fun p0 ((_ BitVec 16) (_ BitVec 12) (_ BitVec 4)  ) Bool )
(declare-fun p1 ((_ BitVec 8) (_ BitVec 14)  ) Bool )
(declare-fun v0 () (_ BitVec 7))
(declare-fun v1 () (_ BitVec 7))
(declare-fun v2 () (_ BitVec 8))
(assert
(let ((e3 (_ bv12156 16)))
(let ((e4 (_ bv16719 15)))
(let ((e5(_ bv1 1)))
(let ((e6 v1))
(let ((e7(_ bv1 1)))
(let ((e8 e5))
(let ((e9 v1))
(let ((e10(_ bv1 1)))
(let ((e11 v1))
(let ((e12 (f1 ((_ extract 5 0) e6) ((_ extract 2 0) v1) ((_ zero_extend 4) e10))))
(let ((e13 (f0 ((_ zero_extend 11) e8))))
(let ((e14 e3))
(let ((e15(_ bv1 1)))
(let ((e16 ((_ rotate_right 9) e4)))
(let ((e17 (p0 ((_ sign_extend 9) v1) ((_ zero_extend 11) e7) ((_ extract 4 1) v0))))
(let ((e18 (p1 v2 ((_ sign_extend 1) e12))))
(let ((e19 (bvslt e13 ((_ zero_extend 1) e15))))
(let ((e20 (bvugt e6 v1)))
(let ((e21 (bvuge ((_ zero_extend 7) e8) v2)))
(let ((e22 (bvsle e16 ((_ zero_extend 14) e5))))
(let ((e23 (bvule ((_ sign_extend 15) e8) e14)))
(let ((e24 (bvuge ((_ zero_extend 15) e15) e14)))
(let ((e25 (bvule e11 e11)))
(let ((e26 (bvuge ((_ sign_extend 9) v0) e3)))
(let ((e27 (bvugt ((_ zero_extend 15) e7) e3)))
(let ((e28 (= e14 ((_ sign_extend 15) e10))))
(let ((e29 (p0 e14 ((_ sign_extend 5) e6) ((_ extract 4 1) v1))))
(let ((e30 (distinct e16 ((_ sign_extend 14) e8))))
(let ((e31 (= e4 e4)))
(let ((e32 (bvsge e4 ((_ zero_extend 14) e10))))
(let ((e33 (bvugt e9 ((_ zero_extend 6) e15))))
(let ((e34 e19))
(let ((e35 e26))
(let ((e36 (not e25)))
(let ((e37 e17))
(let ((e38 e24))
(let ((e39 e38))
(let ((e40 e35))
(let ((e41 e39))
(let ((e42 e27))
(let ((e43 e41))
(let ((e44 e29))
(let ((e45 e22))
(let ((e46 e23))
(let ((e47 e46))
(let ((e48 e36))
(let ((e49 e43))
(let ((e50 e49))
(let ((e51 e45))
(let ((e52 e51))
(let ((e53 e48))
(let ((e54 e52))
e54
)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)